// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VsfServiceClient is the client API for VsfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VsfServiceClient interface {
	// StartLocalFunction starts a Service Function on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vsf/config.yaml
	//   3. all bytes constituting the Function YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalFunction(ctx context.Context, opts ...grpc.CallOption) (VsfService_StartLocalFunctionClient, error)
	// StartFromPreviousFunction starts a new Function based on a previous one.
	// If the previous Function does not have the can-replay condition set this call will result in an error.
	StartFromPreviousFunction(ctx context.Context, in *StartFromPreviousFunctionRequest, opts ...grpc.CallOption) (*StartFunctionResponse, error)
	// StartFunctionRequest starts a new Function based on its specification.
	StartFunction(ctx context.Context, in *StartFunctionRequest, opts ...grpc.CallOption) (*StartFunctionResponse, error)
	// Searches for Function(s) known to this Function
	ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error)
	// Subscribe listens to new Function(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VsfService_SubscribeClient, error)
	// GetFunction retrieves details of a single Function
	GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	// Listen listens to Function updates and log output of a running Function
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VsfService_ListenClient, error)
	// StopFunction stops a currently running Function
	StopFunction(ctx context.Context, in *StopFunctionRequest, opts ...grpc.CallOption) (*StopFunctionResponse, error)
}

type vsfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVsfServiceClient(cc grpc.ClientConnInterface) VsfServiceClient {
	return &vsfServiceClient{cc}
}

func (c *vsfServiceClient) StartLocalFunction(ctx context.Context, opts ...grpc.CallOption) (VsfService_StartLocalFunctionClient, error) {
	stream, err := c.cc.NewStream(ctx, &VsfService_ServiceDesc.Streams[0], "/v1.VsfService/StartLocalFunction", opts...)
	if err != nil {
		return nil, err
	}
	x := &vsfServiceStartLocalFunctionClient{stream}
	return x, nil
}

type VsfService_StartLocalFunctionClient interface {
	Send(*StartLocalFunctionRequest) error
	CloseAndRecv() (*StartFunctionResponse, error)
	grpc.ClientStream
}

type vsfServiceStartLocalFunctionClient struct {
	grpc.ClientStream
}

func (x *vsfServiceStartLocalFunctionClient) Send(m *StartLocalFunctionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vsfServiceStartLocalFunctionClient) CloseAndRecv() (*StartFunctionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartFunctionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vsfServiceClient) StartFromPreviousFunction(ctx context.Context, in *StartFromPreviousFunctionRequest, opts ...grpc.CallOption) (*StartFunctionResponse, error) {
	out := new(StartFunctionResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfService/StartFromPreviousFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vsfServiceClient) StartFunction(ctx context.Context, in *StartFunctionRequest, opts ...grpc.CallOption) (*StartFunctionResponse, error) {
	out := new(StartFunctionResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfService/StartFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vsfServiceClient) ListFunctions(ctx context.Context, in *ListFunctionsRequest, opts ...grpc.CallOption) (*ListFunctionsResponse, error) {
	out := new(ListFunctionsResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfService/ListFunctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vsfServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VsfService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VsfService_ServiceDesc.Streams[1], "/v1.VsfService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vsfServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VsfService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type vsfServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *vsfServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vsfServiceClient) GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfService/GetFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vsfServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VsfService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &VsfService_ServiceDesc.Streams[2], "/v1.VsfService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &vsfServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VsfService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type vsfServiceListenClient struct {
	grpc.ClientStream
}

func (x *vsfServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vsfServiceClient) StopFunction(ctx context.Context, in *StopFunctionRequest, opts ...grpc.CallOption) (*StopFunctionResponse, error) {
	out := new(StopFunctionResponse)
	err := c.cc.Invoke(ctx, "/v1.VsfService/StopFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VsfServiceServer is the server API for VsfService service.
// All implementations must embed UnimplementedVsfServiceServer
// for forward compatibility
type VsfServiceServer interface {
	// StartLocalFunction starts a Service Function on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vsf/config.yaml
	//   3. all bytes constituting the Function YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalFunction(VsfService_StartLocalFunctionServer) error
	// StartFromPreviousFunction starts a new Function based on a previous one.
	// If the previous Function does not have the can-replay condition set this call will result in an error.
	StartFromPreviousFunction(context.Context, *StartFromPreviousFunctionRequest) (*StartFunctionResponse, error)
	// StartFunctionRequest starts a new Function based on its specification.
	StartFunction(context.Context, *StartFunctionRequest) (*StartFunctionResponse, error)
	// Searches for Function(s) known to this Function
	ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error)
	// Subscribe listens to new Function(s) updates
	Subscribe(*SubscribeRequest, VsfService_SubscribeServer) error
	// GetFunction retrieves details of a single Function
	GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	// Listen listens to Function updates and log output of a running Function
	Listen(*ListenRequest, VsfService_ListenServer) error
	// StopFunction stops a currently running Function
	StopFunction(context.Context, *StopFunctionRequest) (*StopFunctionResponse, error)
	mustEmbedUnimplementedVsfServiceServer()
}

// UnimplementedVsfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVsfServiceServer struct {
}

func (UnimplementedVsfServiceServer) StartLocalFunction(VsfService_StartLocalFunctionServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalFunction not implemented")
}
func (UnimplementedVsfServiceServer) StartFromPreviousFunction(context.Context, *StartFromPreviousFunctionRequest) (*StartFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousFunction not implemented")
}
func (UnimplementedVsfServiceServer) StartFunction(context.Context, *StartFunctionRequest) (*StartFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFunction not implemented")
}
func (UnimplementedVsfServiceServer) ListFunctions(context.Context, *ListFunctionsRequest) (*ListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedVsfServiceServer) Subscribe(*SubscribeRequest, VsfService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVsfServiceServer) GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedVsfServiceServer) Listen(*ListenRequest, VsfService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedVsfServiceServer) StopFunction(context.Context, *StopFunctionRequest) (*StopFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFunction not implemented")
}
func (UnimplementedVsfServiceServer) mustEmbedUnimplementedVsfServiceServer() {}

// UnsafeVsfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VsfServiceServer will
// result in compilation errors.
type UnsafeVsfServiceServer interface {
	mustEmbedUnimplementedVsfServiceServer()
}

func RegisterVsfServiceServer(s grpc.ServiceRegistrar, srv VsfServiceServer) {
	s.RegisterService(&VsfService_ServiceDesc, srv)
}

func _VsfService_StartLocalFunction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VsfServiceServer).StartLocalFunction(&vsfServiceStartLocalFunctionServer{stream})
}

type VsfService_StartLocalFunctionServer interface {
	SendAndClose(*StartFunctionResponse) error
	Recv() (*StartLocalFunctionRequest, error)
	grpc.ServerStream
}

type vsfServiceStartLocalFunctionServer struct {
	grpc.ServerStream
}

func (x *vsfServiceStartLocalFunctionServer) SendAndClose(m *StartFunctionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vsfServiceStartLocalFunctionServer) Recv() (*StartLocalFunctionRequest, error) {
	m := new(StartLocalFunctionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VsfService_StartFromPreviousFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfServiceServer).StartFromPreviousFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfService/StartFromPreviousFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfServiceServer).StartFromPreviousFunction(ctx, req.(*StartFromPreviousFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VsfService_StartFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfServiceServer).StartFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfService/StartFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfServiceServer).StartFunction(ctx, req.(*StartFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VsfService_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfServiceServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfService/ListFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfServiceServer).ListFunctions(ctx, req.(*ListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VsfService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VsfServiceServer).Subscribe(m, &vsfServiceSubscribeServer{stream})
}

type VsfService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type vsfServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *vsfServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VsfService_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfServiceServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfService/GetFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfServiceServer).GetFunction(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VsfService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VsfServiceServer).Listen(m, &vsfServiceListenServer{stream})
}

type VsfService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type vsfServiceListenServer struct {
	grpc.ServerStream
}

func (x *vsfServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VsfService_StopFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VsfServiceServer).StopFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VsfService/StopFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VsfServiceServer).StopFunction(ctx, req.(*StopFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VsfService_ServiceDesc is the grpc.ServiceDesc for VsfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VsfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VsfService",
	HandlerType: (*VsfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousFunction",
			Handler:    _VsfService_StartFromPreviousFunction_Handler,
		},
		{
			MethodName: "StartFunction",
			Handler:    _VsfService_StartFunction_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _VsfService_ListFunctions_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _VsfService_GetFunction_Handler,
		},
		{
			MethodName: "StopFunction",
			Handler:    _VsfService_StopFunction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalFunction",
			Handler:       _VsfService_StartLocalFunction_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _VsfService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _VsfService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vsf.proto",
}
